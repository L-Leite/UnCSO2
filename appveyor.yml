version: 2.0.7-{build}

image:
  - Ubuntu1604
  - Visual Studio 2019

environment:
  matrix:
    - BUILD_COMBO: linux-gcc
      CMAKE_PREFIX_PATH: "/home/appveyor/Qt/5.14/gcc_64"
      QT_DIR: "/home/appveyor/Qt/5.14/gcc_64"
    - BUILD_COMBO: linux-clang
      CMAKE_PREFIX_PATH: "/home/appveyor/Qt/5.14/gcc_64"
      QT_DIR: "/home/appveyor/Qt/5.14/gcc_64"
    - BUILD_COMBO: windows-mingw
      CMAKE_PREFIX_PATH: "C:\\Qt\\5.14\\mingw73_64"
      QT_DIR: "C:\\Qt\\5.14\\mingw73_64"
    - BUILD_COMBO: windows-msvc
      CMAKE_PREFIX_PATH: "C:\\Qt\\5.14\\msvc2017_64"
      QT_DIR: "C:\\Qt\\5.14\\msvc2017_64"

matrix:
  exclude:
    - image: Ubuntu1604
      BUILD_COMBO: windows-mingw
    - image: Ubuntu1604
      BUILD_COMBO: windows-msvc
    - image: Visual Studio 2019
      BUILD_COMBO: linux-gcc
    - image: Visual Studio 2019
      BUILD_COMBO: linux-clang

configuration: Release

install:
  - cmd: set PATH=%PATH%;%QT_DIR%\\bin
  - sh: export PATH="${PATH}:${QT_DIR}/bin"
  - ps: ./ci/setup.ps1
  #- sh: source /opt/qt512/bin/qt512-env.sh

build_script:
  - ps: ./ci/build.ps1

after_build:
  - ps: ./ci/pack.ps1
  - ps: $env:VERSION_STR = Get-Content -Path ./version.txt -TotalCount 1

artifacts:
- path: build/UnCSO2-*-win64_mingw.7z
  name: mingw_binaries
- path: build/UnCSO2-*-win64_msvc.7z
  name: msvc_binaries
- path: 'build/package/UnCSO2-*-linux64_gcc.AppImage'
  name: gcc_binaries
- path: 'build/package/UnCSO2-*-linux64_clang.AppImage'
  name: linuxclang_binaries

deploy:
- provider: GitHub
  release: Version $(VERSION_STR)
  auth_token:
    secure: zFKThFJ7iaLK4Ou84pDrX0bpvlThqt6naZK//cneoJBdiAn3hKlzUA+Eq0qYqZ5g
  artifact: mingw_binaries,gcc_binaries
  on:
    APPVEYOR_REPO_TAG: true

# on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
#  - sh: export APPVEYOR_SSH_BLOCK=true
#  - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -
